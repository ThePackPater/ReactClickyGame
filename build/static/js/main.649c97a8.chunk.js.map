{"version":3,"sources":["components/MemCard/index.jsx","components/GameBoard/index.jsx","deck.js","index.jsx","App.jsx"],"names":["MemCard","_ref","disabled","handleClick","type","id","flipped","solved","height","width","react_default","a","createElement","className","concat","style","onClick","src","alt","GameBoard","dimension","cards","map","card","Object","assign","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","apply","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setCards","_useState3","_useState4","setFlipped","_useState5","_useState6","setDimension","_useState7","_useState8","setSolved","_useState9","_useState10","setDisabled","useEffect","resizeGameboard","resizeListener","window","addEventListener","removeEventListener","min","document","documentElement","clientWidth","clientHeight","resetCards","sameCardClickedTwice","clickedCard","find","isAMatch","toConsumableArray","setTimeout","diabled","getElementById"],"mappings":"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","file":"static/js/main.649c97a8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nexport default function MemCard({ \r\n    disabled, \r\n    handleClick, \r\n    type, \r\n    id, \r\n    flipped,\r\n    solved,  \r\n    height, \r\n    width\r\n}) {\r\n    return(\r\n\r\n        <div \r\n            className={`flip-container ${flipped ? \"flipped\" : \"\"} `}\r\n            style={{width, height}}\r\n            onClick={() => disabled ? null : handleClick(id)}\r\n        >\r\n            <div className=\"flipper\">\r\n                <img\r\n                    style={{height, width}}\r\n                    className={flipped ? \"front\" : \"back\"}\r\n                    src={flipped || solved ? `/img/${type}.jpg` : `/AcardBack.jpg`}\r\n                    alt={\"punk rock card\"}\r\n                />\r\n            </div>\r\n        </div>\r\n    \r\n    )};\r\n\r\nMemCard.propTypes = {\r\n    disabled: PropTypes.bool,\r\n    handleClick: PropTypes.func.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    flipped: PropTypes.bool.isRequired,\r\n    solved: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport MemCard from \"../MemCard\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function GameBoard({\r\n    solved, \r\n    disabled,\r\n    dimension,\r\n    cards, \r\n    flipped, \r\n    handleClick\r\n    }) {\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"board\">\r\n            {\r\n                cards.map((card) => ( <MemCard\r\n                key={card.id}\r\n                id={card.id}\r\n                type={card.type}\r\n                height={dimension / 5.5} \r\n                width={dimension / 5.5}\r\n                flipped={flipped.includes(card.id)}\r\n                handleClick={handleClick}\r\n                disabled={disabled || solved.includes(card.id)}\r\n                solved={solved.includes(card.id)}\r\n                {...card}\r\n                />\r\n            ))};\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nGameBoard.propTypes = {\r\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    dimension: PropTypes.number.isRequired,\r\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\r\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool,\r\n}\r\n","\r\nfunction shuffle(array) {\r\n    const _array = array.slice(0)\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        let randomIndex = Math.floor(Math.random() * (i + 1))\r\n        let temp = _array[i]\r\n        _array[i] = _array[randomIndex]\r\n        _array[randomIndex] = temp\r\n    }\r\n\r\n    return _array;\r\n};\r\n\r\nexport default function initializeDeck() {\r\n    let id = 0\r\n    const cards = [ \"badReligion\", \"blackFlag\", \r\n                    \"deadKennedys\", \"decendents\",\r\n                    \"minorThreat\", \"Misfits\",\r\n                    \"Ramones\", \"sexPistols\"\r\n                    // \"exploited\", \"dri\", \r\n                    // \"clash\", \"Adicts\"\r\n        ].reduce((acc, type) => {\r\n            acc.push(...[{\r\n                id: id++,\r\n                type \r\n            }, {\r\n                id: id++,\r\n                type\r\n            }])\r\n                return acc\r\n            }, []);\r\n\r\n            return shuffle(cards);\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","import React, { useState, useEffect } from \"react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport initializeDeck from \"./deck\";\r\n\r\nexport default function App() {\r\n    const [cards, setCards] = useState([]);\r\n    const [flipped, setFlipped] = useState([]);\r\n    const [dimension, setDimension] = useState(400);\r\n    const [solved, setSolved] = useState([]);\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    useEffect(() => {\r\n        resizeGameboard()\r\n        setCards(initializeDeck())\r\n    }, []);\r\n   \r\n    useEffect(() => {\r\n        const resizeListener = window.addEventListener(\"resize\", resizeGameboard)\r\n        return () => window.removeEventListener(\"resize\", resizeListener)\r\n    });\r\n\r\n    const resizeGameboard = () => {\r\n        setDimension(Math.min(\r\n            document.documentElement.clientWidth,\r\n            document.documentElement.clientHeight\r\n        ),\r\n    )};\r\n\r\n    const sameCardClickedTwice = (id) => flipped.includes(id);\r\n\r\n    const isAMatch = (id) => {\r\n        const clickedCard = cards.find((card) => card.id === id)\r\n        const flippedCard = cards.find((card) => flipped[0] === card.id)\r\n        return flippedCard.type === clickedCard.type\r\n\r\n    };\r\n\r\n    const resetCards = () => {\r\n        setFlipped([])\r\n        setDisabled(false)\r\n    };\r\n\r\n    const handleClick = (id) => {\r\n        setDisabled(true)\r\n        if (flipped.length === 0) {\r\n            setFlipped([id])\r\n            setDisabled(false)\r\n        } else {\r\n            if (sameCardClickedTwice(id)) return \r\n                setFlipped([flipped[0], id])\r\n            if (isAMatch(id)) { \r\n                setSolved([...solved, flipped[0], id])\r\n                //need code if solved remove cards || keep cards face up & add points \r\n            } else {\r\n                setTimeout(resetCards, 2000)\r\n            }\r\n        }\r\n    };\r\n\r\n \r\n    return(\r\n        <div>\r\n            <h1>Match the PUNK BAND Logos!!</h1>\r\n                <GameBoard\r\n                    dimension={dimension}\r\n                    cards={cards}\r\n                    flipped={flipped}\r\n                    handleClick={handleClick}\r\n                    diabled={disabled}\r\n                    solved={solved}\r\n                />\r\n            <h1>And FIGHT the System!!</h1>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}